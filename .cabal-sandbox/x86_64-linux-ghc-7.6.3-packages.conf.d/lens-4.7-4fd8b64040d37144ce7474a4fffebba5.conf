name: lens
version: 4.7
id: lens-4.7-4fd8b64040d37144ce7474a4fffebba5
license: BSD3
copyright: Copyright (C) 2012-2014 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
                 Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Loupe Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Monad.Primitive.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Map.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/prashant/Thesis/tree/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.7
library-dirs: /home/prashant/Thesis/tree/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.7
hs-libraries: HSlens-4.7
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         bifunctors-4.2-4718d5b6d1153a2a72b5f0bde77c0e9e
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         comonad-4.2.2-ed18e6c4220c94df736716c0eba782bf
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         contravariant-1.2.0.1-094db4b9f1fbf2abb4f8d14e94172f0c
         distributive-0.4.4-618488dd52b5de9ff16eead3a0790590
         exceptions-0.8-d431c690cf232a351055c3e6ff254153
         filepath-1.3.0.1-b12cbe18566fe1532a1fda4c85e31cbe
         free-4.10.0.1-28e98609b5a8481b5457586d5c1171cd
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.3.1-fb7344c1ec4bf2894854c26695184ba4
         mtl-2.2.1-eda0a12427f66d975ce72a312c95b37a
         parallel-3.2.0.6-40039fd70e66b123f98063d7026c8c1c
         primitive-0.5.4.0-78f6a135f390e9c0d466d3e75929b5b3
         profunctors-4.3.2-25a9e49437661a8f946064b751ad28ad
         reflection-1.5.1.1-7cc978d83f766788ff7f9258234b2439
         semigroupoids-4.3-f8d22d524312ab87c433720c278e1b7e
         semigroups-0.16.1-ccf29984922abb82ab129557a2481601
         split-0.2.2-9ce33138f4fcfb9c37f6e6c300bcc367
         tagged-0.7.3-8d0cd5417885ac66ae852f4c39d51376
         template-haskell-2.8.0.0-a3012803fde1dc362e555b35a1a78e6d
         text-1.2.0.4-a11471457388d06cd2cdf5bc94fe8da6
         transformers-0.4.2.0-0ec820292ab05aafbe24f987bad9e554
         transformers-compat-0.4.0.4-dcef4e1eeab8de73981ca7a7147f19d8
         unordered-containers-0.2.5.1-9f663080ad9bd1482d4577ece442f916
         vector-0.10.12.2-64c9e6c775734eeabdc694681a06f287
         void-0.7-e57084354e3a020f84a56024bbca1f4e
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/prashant/Thesis/tree/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.7/html/lens.haddock
haddock-html: /home/prashant/Thesis/tree/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.7/html
